@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix grel: <http://users.ugent.be/~bjdmeest/function/grel.ttl#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix idlab-fn: <http://example.com/idlab/function/> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix ispra-emf: <https://dati.isprambiente.it/ontology/ispra-emf/>.
@prefix ispra-plc: <https://w3id.org/stlab/ispra-plc/> .
@prefix ispra-top: <https://dati.isprambiente.it/ontology/ispra-top/> .
@prefix crml: <http://w3id.org/stlab/crml#> .
@prefix hydro: <https://w3id.org/whow/onto/hydrography/>.
@prefix w-mon: <https://w3id.org/whow/onto/water-monitoring/>.
@base <https://w3id.org/whow/data/water-monitoring/> .


#java -jar .\rmlmapper-4.15.0-r361-all.jar -m water-monitoring-mapping.ttl -o water-monitoring-mappingoutput.ttl -s turtle


# #LogicalSourceLaghi
<#LogicalSourceLaghi> a rml:BaseSource ;
    rml:source [
      a csvw:Table;
      csvw:url "023-ACQUE-SUPERFICIALI-DATI-Laghi.csv";

      csvw:dialect [
        a csvw:Dialect;
        csvw:delimiter ","
      ]
    ];
    rml:referenceFormulation ql:CSV .

    ###########################################################
    ##                  MAPPING RULES
    ##########################################################

    <#WaterObservationMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    fnml:functionValue [
      rml:logicalSource <#LogicalSourceLaghi>;
     rr:predicateObjectMap [

     rr:predicate fno:executes ;
     rr:objectMap [ rr:constant grel:array_join ]
   ] ;
   rr:predicateObjectMap [
     rr:predicate grel:p_array_a ;
     rr:objectMap  [ rr:constant "http://w3id.org/whow/data/water-observation"]
   ];
   rr:predicateObjectMap [
     rr:predicate grel:p_array_a ;
     rr:objectMap  <#MD5Execution>
   ];
   rr:predicateObjectMap [
     rr:predicate grel:p_string_sep ;
     rr:objectMap [ rr:constant "/" ]
   ];
 ];
 ];
    rr:predicateObjectMap [
     rr:predicate rdfs:label ;
     rr:objectMap [
         rr:template "Observation for the parameter {PARAMETRO} of water basin {BACINO IDROGRAFICO} for lake {LAGO}. Waterbody code: {CORPO IDRICO} at date {DATA CAMPIONAMENTO}" ; rr:language "en" ]
         ];

    rr:predicateObjectMap [
     rr:predicate w-mon:hasObservationSample ;
     rr:objectMap <#URIObservationSampleMapping>
    ];

    rr:predicateObjectMap [
      rr:predicate w-mon:hasResult ;
      rr:objectMap <#URLifyObservationResultURI-Function>
    ];

    rr:predicateObjectMap [
       rr:predicate w-mon:hasWaterObservableProperty ;
       rr:objectMap [
          rr:template "http://w3id.org/whow/data/observable-property/concentrazione-di-{PARAMETRO}";
          rr:termType rr:IRI;]
     ];

     rr:predicateObjectMap [
        rr:predicate ispra-emf:generationTime ;
        rr:objectMap [
           rr:template "http://w3id.org/whow/data/time/{DATA CAMPIONAMENTO}";
           rr:termType rr:IRI;]
      ].
    ### water sample Mapping

    <#ObservationSampleMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    fnml:functionValue [
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant grel:array_join ]
     ];

      rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap [ rr:constant "https://w3id.org/whow/data/observation-sample/"]
      ] ;
      rr:predicateObjectMap [
            rr:predicate grel:p_array_a ;
            rr:objectMap
                    <#ReplaceWhitespacesWithDash-ObservationSampleFunction>

      ];
    ];
    rr:class w-mon:WaterSample;
    rr:termType rr:IRI
    ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Water depth sampling description: {Descrizione Profondità} in the value/range value {Profondità}" ; rr:language "en" ]
      ];
      rr:predicateObjectMap [
         rr:predicate w-mon:depth ;
         rr:objectMap [
            rml:reference "Profondità" ; rr:datatype rdfs:literal]
       ];
     rr:predicateObjectMap [
        rr:predicate w-mon:isObtainedBy ;
        rr:objectMap [
           rr:template "http://w3id.org/whow/data/water-sampler/{Codice Stazione}";
           rr:termType rr:IRI; ]
      ];
      rr:predicateObjectMap [
         rr:predicate w-mon:isSampleOf ;
         rr:objectMap [
            rr:template "http://w3id.org/whow/data/water-feature/{CORPO IDRICO}";
            rr:termType rr:IRI; ]
       ].


    ### result Mapping
    <#ResultMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    fnml:functionValue [
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant grel:array_join ]
     ];

      rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap [ rr:constant "https://w3id.org/whow/data/observation-result"]
      ] ;
      rr:predicateObjectMap [
            rr:predicate grel:p_array_a ;
            rr:objectMap
                    <#ReplaceLTGTFunction>

      ];
      rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap <#URLifyUnitOfMeasure>
      ] ;
      rr:predicateObjectMap [
        rr:predicate grel:p_string_sep ;
        rr:objectMap [ rr:constant "-" ]
      ]
    ];
          rr:class w-mon:ObservationValue
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Observation value {VALORE} {UM}" ; rr:language "en" ] #agg datatype property
      ];

      rr:predicateObjectMap [
        rr:predicate ispra-top:hasUnitOfMeasure;
        rr:objectMap <#URLifyUnitOfMeasure2>

        ].


    ### observable property Mapping
    <#ObservablePropertyMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "http://w3id.org/whow/data/observable-property/concentrazione-di-{PARAMETRO}";
    rr:class w-mon:WaterObservableProperty
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "{PARAMETRO}" ; rr:language "it"]
      ];
     rr:predicateObjectMap [
        rr:predicate w-mon:hasChemicalSubstance ;
        rr:objectMap [rr:template "http://w3id.org/whow/data/chemical-substances/chemical-substance/{CAS}"; rr:termType rr:IRI] #funzione distinguere cas wise etc.
        ].

    ### water sampler mapping
    <#WaterSamplerMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "http://w3id.org/whow/data/water-sampler/{Codice Stazione}";
    rr:class w-mon:WaterSampler
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Station {Codice Stazione}." ; rr:language "en"] #controlla cosa messo cas e obsprop. en?
      ];
     rr:predicateObjectMap [
        rr:predicate ispra-plc:hasProvince ;
        rr:objectMap [rr:template "http://w3id.org/whow/data/provinces/{PROVINCIA}"; rr:termType rr:IRI]

    ];
     rr:predicateObjectMap [
        rr:predicate ispra-plc:hasMunicipality ;
        #rr:objectMap [<#MunicipalityMapping>]
        rr:objectMap [rr:template "https://w3id.org/whow/data/municipality/{COMUNE}"]
        ].

    ### water feature (hydro) mapping

    <#WaterFeatureBasinMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "http://w3id.org/whow/data/water-feature/{CORPO IDRICO}";
    rr:class hydro:LakeWaterBody
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Lake {LAGO}, code {CORPO IDRICO}" ; rr:language "en"]
      ];
    rr:predicateObjectMap [
        rr:predicate hydro:hasWaterBasin ;
        rr:objectMap [rr:template "http://w3id.org/whow/data/water-feature/{BACINO IDROGRAFICO}"; rr:termType rr:IRI]
      ].

    #Unit of measure mapping

    <#UnitOfMeasureMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "http://w3id.org/whow/data/um/{UM}";
    rr:class ispra-top:UnitOfMeasure
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Unit of measure {UM}" ; rr:language "en"]
      ].


    ## chem. subst. mapping
    <#ChemicalSubstanceMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "http://w3id.org/whow/data/chemical-substances/chemical-substance/{CAS}";
    rr:class w-mon:ChemicalSubstance
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "{PARAMETRO} — Codice: {CAS}" ; rr:language "it"] #controllare voc contr
      ];
      rr:predicateObjectMap [
         rr:predicate skos:altLabel ;
         rr:objectMap [
            rr:template "{PARAMETRO}" ; rr:datatype xsd:string]
       ];
      rr:predicateObjectMap [
         rr:predicate skos:notation ;
         rr:objectMap [
            rr:template "{CAS}"; rr:datatype xsd:string]
       ];
      rr:predicateObjectMap [
         rr:predicate ispra-top:hasUniqueIdentifier ;
         rr:objectMap [rr:template "http://w3id.org/whow/data/unique-identifier/{CAS}"; rr:termType rr:IRI]
       ].


    #ProvincesMapping
    <#ProvincesMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "http://w3id.org/whow/data/provinces/{PROVINCIA}"; #controllare voc contr
    rr:class ispra-plc:Province
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Province {PROVINCIA}" ; rr:language "en"] #controllare voc contr
      ].

    #municipalitymapping NON FUNZIONA
    <#MunicipalityMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "https://w3id.org/whow/data/municipality/{COMUNE}";
    rr:termType rr:IRI
    #fnml:functionValue [
     #rr:predicateObjectMap [
    #   rr:predicate fno:executes ;
    #   rr:objectMap [ rr:constant grel:array_join ]
     #];
    #  rr:predicateObjectMap [
    #    rr:predicate grel:p_array_a ;
    #    rr:objectMap [ rr:constant "https://w3id.org/whow/data/municipality"]
    #  ] ;
    #  rr:predicateObjectMap [
    #        rr:predicate grel:p_array_a ;
            #rr:objectMap <#MunicipalityURI2> COMMENTATO PERCHé NON FUNZIONA
    #        rr:objectMap [rr:template "{COMUNE}"]
    #       ];
    #       rr:predicateObjectMap [
    #         rr:predicate grel:p_string_sep ;
    #         rr:objectMap [ rr:constant "/" ]
    #       ];

     ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Municipality {COMUNE}" ; rr:language "en"] #coordinate =?
      ].

    #water basin mapping
    <#WaterBasinMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "http://w3id.org/whow/data/water-feature/{BACINO IDROGRAFICO}";
    rr:class hydro:WaterBasin
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Water basin {BACINO IDROGRAFICO}" ; rr:language "en"]
      ].

    #unique identifier mapping

    <#UniqueIdentifierMapping> a rr:TriplesMap;
    rml:logicalSource <#LogicalSourceLaghi>;
    rr:subjectMap [
    rr:template "http://w3id.org/whow/data/chemical-substances/identifier/{CAS}";
    rr:class ispra-top:UniqueIdentifier
                ];
     rr:predicateObjectMap [
        rr:predicate rdfs:label ;
        rr:objectMap [
           rr:template "Unique identifier {CAS}" ; rr:language "en"]
      ].

############### FUNCTIONS

## 1. ARRAY JOIN URI + MD5

<#CreateObservationSampleURI-Function>
    fnml:functionValue [
      rml:logicalSource <#LogicalSourceLaghi>;
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant grel:array_join ]
     ];

      rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap [ rr:constant "https://w3id.org/whow/data/water-observation"]
      ] ;
      rr:predicateObjectMap [
            rr:predicate grel:p_array_a ;
            rr:objectMap
                    <#SubjectMapMappingFunzione>

      ];
      ].

## 2. MD5 URI Osservazione
<#SubjectMapMappingFunzione>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:string_md5 ]
 ];
 rr:predicateObjectMap [
 rr:predicate grel:valueParameter ;
 rr:objectMap [ rml:reference "CORPO IDRICO" ] #ma non è somma cose
   ]
 ];
 rr:class w-mon:WaterObservation; #controllare
 rr:termType rr:IRI .

## 3. URI di descrizione Profondità

<#CreateObservationSampleURI-Function>
    fnml:functionValue [
      rml:logicalSource <#LogicalSourceLaghi>;
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant grel:array_join ]
     ];

      rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap [ rr:constant "https://w3id.org/whow/data/observation-sample"]
      ] ;
      rr:predicateObjectMap [
            rr:predicate grel:p_array_a ;
            rr:objectMap
                    <#ReplaceWhitespacesWithDash-ObservationSampleFunction>

      ];
      rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap [ rr:template "{Profondità}"]
      ] ;
      rr:predicateObjectMap [
        rr:predicate grel:p_string_sep ;
        rr:objectMap [ rr:constant "/" ]
      ]
    ];
    rr:class w-mon:ObservationSample;
    rr:termType rr:IRI .

## 4. sostituzione spazi con dash


    <#ReplaceWhitespacesWithDash-ObservationSampleFunction>
    fnml:functionValue [
      rml:logicalSource <#LogicalSourceLaghi>;
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant grel:string_replaceChars ]
     ];

     rr:predicateObjectMap [
         rr:predicate grel:valueParameter ;
         rr:objectMap <#FindReplaceCommas>
         ];
      rr:predicateObjectMap [
        rr:predicate grel:p_string_find ;
        rr:objectMap [ rr:constant " " ]
      ];
      rr:predicateObjectMap [
        rr:predicate grel:p_string_replace ;
        rr:objectMap [ rr:constant "-" ]
];
     ].

     <#FindReplaceCommas>
     fnml:functionValue [
       rml:logicalSource <#LogicalSourceLaghi>;
       rr:predicateObjectMap [
         rr:predicate fno:executes ;
         rr:objectMap [ rr:constant grel:string_replaceChars ]
      ];

      rr:predicateObjectMap [
          rr:predicate grel:valueParameter ;
          rr:objectMap [ rml:reference "Profondità"]
          ];
       rr:predicateObjectMap [
         rr:predicate grel:p_string_find ;
         rr:objectMap [ rr:constant "," ]
       ];
       rr:predicateObjectMap [
         rr:predicate grel:p_string_replace ;
         rr:objectMap [ rr:constant "." ]
 ];
      ].

## 5. Mapping observation sample URIObservationSampleMapping
<#URIObservationSampleMapping>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ];

  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap [ rr:constant "https://w3id.org/whow/data/observation-sample/"]
  ] ;
  rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap
                <#ReplaceWhitespacesWithDash-ObservationSampleFunction>

  ];
];
rr:class w-mon:WaterSample;
rr:termType rr:IRI .

## 6 - #URLifyObservationResultURI-Function
# http://w3id.org/whow/data/observation-result/{VALORE}-{UM}

<#URLifyObservationResultURI-Function>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ];

  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap [ rr:constant "http://w3id.org/whow/data/observation-result/"]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap <#ReplaceLTGTFunction>
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_string_sep ;
    rr:objectMap <#URLifyUnitOfMeasure>
  ]
] .


# 7. Replace comma + greather than, less than, in value

<#ReplaceCommaValue>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:string_replaceChars ]
 ];

 rr:predicateObjectMap [
     rr:predicate grel:valueParameter ;
     rr:objectMap [ rml:reference "VALORE"]
     ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_find ;
    rr:objectMap [ rr:constant "," ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_replace ;
    rr:objectMap [ rr:constant "." ]
];
 ].

<#ReplaceLTGTFunction>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:string_replaceChars ]
 ];

 rr:predicateObjectMap [
     rr:predicate grel:valueParameter ;
     rr:objectMap [ rml:reference "VALORE"] #NON VA LT GT
     ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_find ;
    rr:objectMap [ rr:constant "<" ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_replace ;
    rr:objectMap [ rr:constant "lt" ]
];
rr:predicateObjectMap [
  rr:predicate grel:p_string_find ;
  rr:objectMap [ rr:constant ">" ]
];
rr:predicateObjectMap [
  rr:predicate grel:p_string_replace ;
  rr:objectMap [ rr:constant "gt" ]
];
 ].

#8. URLify Unit Of measure

<#URLifyUnitOfMeasure>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:string_replaceChars ]
 ];

 rr:predicateObjectMap [
     rr:predicate grel:valueParameter ;
     rr:objectMap [ rml:reference "UM"]
     ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_find ;
    rr:objectMap [ rr:constant "/" ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_replace ;
    rr:objectMap [ rr:constant "-" ] #potrebbe esserci anche un codice um forse
];
 ].

#9. urlifyy unit of measure 2
<#URLifyUnitOfMeasure2>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ];

  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap [ rr:constant "http://w3id.org/whow/data/um/"]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap <#URLifyUnitOfMeasure3>
  ] ;
];
rr:class w-mon:UnitOfMeasure;
rr:termType rr:IRI .


<#URLifyUnitOfMeasure3>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:string_replaceChars ]
 ];

 rr:predicateObjectMap [
     rr:predicate grel:valueParameter ;
     rr:objectMap [ rml:reference "UM"]
     ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_find ;
    rr:objectMap [ rr:constant "/" ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_replace ;
    rr:objectMap [ rr:constant "-" ] #potrebbe esserci anche un codice um forse
];
 ].

 ## Municipality subjectmap mappingoutput




  #Municipality URI 2
#<#MunicipalityURI2>
#        fnml:functionValue [
#            rml:logicalSource <#LogicalSourceLaghi> ;
#            rr:predicateObjectMap [
#                rr:predicate fno:executes ;
#                rr:objectMap [ rr:constant grel:toLowerCase ]
#            ] ;
#            rr:predicateObjectMap [
#                rr:predicate grel:valueParameter ;
#                rr:objectMap [
#                fnml:functionValue [
#                  rr:predicateObjectMap [
                    #rr:predicate fno:executes ;
                    #rr:objectMap [ rr:constant grel:string_replaceChars ]
#                 ];
#                 rr:predicateObjectMap [
#                     rr:predicate grel:valueParameter ;
#                     rr:objectMap [ rml:reference "COMUNE"]
#                     ];
#                  rr:predicateObjectMap [
#                    rr:predicate grel:p_string_find ;
#                    rr:objectMap [ rr:constant " " ]
#                  ];
#                  rr:predicateObjectMap [
#                    rr:predicate grel:p_string_replace ;
#                    rr:objectMap [ rr:constant "-" ]
#                ];
#                 ]
#                ]        # Use as input the "name" reference
#            ];
  #      ].

## MD5 MD5Execution



<#MD5Execution>
fnml:functionValue [
    rml:logicalSource <#LogicalSourceLaghi> ;
rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant grel:string_md5 ]
     ];
     rr:predicateObjectMap [
     rr:predicate grel:valueParameter ;
     rr:objectMap <#ArrayJoinInteraRiga>
       ];
     rr:class w-mon:WaterObservation;
     rr:termType rr:IRI;
    ].


### Array join intera riga

<#ArrayJoinInteraRiga>
fnml:functionValue [
    rml:logicalSource <#LogicalSourceLaghi> ;
rr:predicateObjectMap [
  rr:predicate fno:executes ;
  rr:objectMap [ rr:constant grel:array_join ]
] ;
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{BACINO IDROGRAFICO}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{LAGO}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{CORPO IDRICO}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{PROVINCIA}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{COMUNE}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{COORD X}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{COORD Y}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{Codice Stazione}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{Descrizione Profondità}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{Profondità}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{DATA CAMPIONAMENTO}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{PARAMETRO}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{CAS}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{UM}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_array_a ;
  rr:objectMap  [ rr:template "{VALORE}"]
];
rr:predicateObjectMap [
  rr:predicate grel:p_string_sep ;
  rr:objectMap [ rr:constant "/" ]
];
].



### Chemical substances classification
<#ChemicalSubstanceClassificationWISE>
rr:termType rr:IRI ;
fnml:functionValue [
rml:logicalSource <#LogicalSourceLaghi>;
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant idlab-fn:trueCondition ]
 ];

  rr:predicateObjectMap [
    rr:predicate idlab-fn:strBoolean ;
    rr:objectMap <#isWISE>
  ] ;

  rr:predicateObjectMap [
    rr:predicate idlab-fn:str ;
    rr:objectMap <#WISEURI>
  ]
].

<#isWISE>
fnml:functionValue [
rml:logicalSource <#LogicalSourceLaghi>;
                       rr:predicateObjectMap [
                                                 rr:predicate fno:executes ;
                                                 rr:objectMap [ rr:constant grel:string_contains ]
                                             ];

                       rr:predicateObjectMap [
                                                 rr:predicate grel:valueParameter ;
                                                 rr:objectMap [ rml:reference "CAS" ]
                                             ] ;

                       rr:predicateObjectMap [
                                                 rr:predicate grel:string_sub ;
                                                 rr:objectMap [ rr:constant "WISE" ]
                                             ];

                   ].


<#WISEURI>
rr:termType rr:IRI ;
fnml:functionValue [
rml:logicalSource <#LogicalSourceLaghi>;
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:array_join ]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:constant "http://w3id.org/whow/data/chemical-substance/wise"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap <#WISECleaning>
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_sep ;
    rr:objectMap [ rr:constant "/" ]
  ];
].

<#WISECleaning>
fnml:functionValue [
  rml:logicalSource <#LogicalSourceLaghi>;
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:string_replace ]
 ];
 rr:predicateObjectMap [
     rr:predicate grel:valueParameter ;
     rr:objectMap [ rml:reference "CAS"] #NON VA LT GT
     ];
     rr:predicateObjectMap [
       rr:predicate grel:p_string_find ;
       rr:objectMap [ rr:constant "WISE " ]
     ];
     rr:predicateObjectMap [
       rr:predicate grel:p_string_replace ;
       rr:objectMap [ rr:constant "" ]
];
    ].

    ##

    <#ChemicalSubstanceClassificationOtherSubstances>
    rr:termType rr:IRI ;
    fnml:functionValue [
    rml:logicalSource <#LogicalSourceLaghi>;
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant idlab-fn:trueCondition ]
     ];

      rr:predicateObjectMap [
        rr:predicate idlab-fn:strBoolean ;
        rr:objectMap <#isOther>
      ] ;

      rr:predicateObjectMap [
        rr:predicate idlab-fn:str ;
        rr:objectMap <#OtherSubstanceURI>
      ]
    ].

    <#isOther>
    fnml:functionValue [
    rml:logicalSource <#LogicalSourceLaghi>;
                           rr:predicateObjectMap [
                                                     rr:predicate fno:executes ;
                                                     rr:objectMap [ rr:constant idlab-fn:listContainsElement ]
                                                 ];

                           rr:predicateObjectMap [
                                                     rr:predicate idlab-fn:list ;
                                                     rr:objectMap [ rr:constant "BIO-ESC-COL" ]
                                                 ] ;

                           rr:predicateObjectMap [
                                                     rr:predicate idlab-fn:str ;
                                                     rr:objectMap [ rml:reference "CAS" ]
                                                 ];

                       ].


    <#OtherSubstanceURI>
    rr:termType rr:IRI ;
    fnml:functionValue [
    rml:logicalSource <#LogicalSourceLaghi>;
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant grel:array_join ]
      ] ;
      rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap  [ rr:constant "http://w3id.org/whow/data/chemical-substance/"]
      ];
      rr:predicateObjectMap [
        rr:predicate grel:p_array_a ;
        rr:objectMap [ rr:template "{CAS}"]
      ];
      rr:predicateObjectMap [
        rr:predicate grel:p_string_sep ;
        rr:objectMap [ rr:constant "/" ]
      ];
    ].
