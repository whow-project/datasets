@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix grel: <http://users.ugent.be/~bjdmeest/function/grel.ttl#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix idlab-fn: <http://example.com/idlab/function/> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix ispra-emf: <https://w3id.org/italia/env/onto/inspire-mf/>.
@prefix ispra-plc: <https://w3id.org/italia/env/onto/place/> .
@prefix ispra-top: <https://w3id.org/italia/env/onto/top/> .
@prefix hydro: <https://w3id.org/whow/onto/hydrography/>.
@prefix w-mon: <https://w3id.org/whow/onto/water-monitoring/>.
@prefix iotapit: <https://w3id.org/italia/onto/IoT/>.
@prefix l0: <https://w3id.org/italia/onto/l0/>.
@prefix tiapit: <https://w3id.org/italia/onto/TI/>.
@base <https://w3id.org/italia/lombardia/data/> .


# #LogicalSourceLakes
<#LogicalSourceLakes> a rml:BaseSource ;
    rml:source "d4ep-yvbw.csv" ;
    rml:referenceFormulation ql:CSV .

##Logical Source PROVINCE RDF
<#InputSPARQL>
    a sd:Service ;
    sd:endpoint <https://schema.gov.it/sparql> ;
    sd:supportedLanguage sd:SPARQL11Query ;
    sd:resultFormat <http://www.w3.org/ns/formats/SPARQL_Results_JSON> .

<#LogicalSourcePROVINCERDF> a rml:BaseSource ;
     rml:source <#InputSPARQL>;
     rml:referenceFormulation ql:JSONPath;
     rml:iterator "$.results.bindings[*]";
     rml:query """
     PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
     PREFIX clv: <https://w3id.org/italia/onto/CLV/>

     SELECT ?s ?provincia ?ID
     WHERE { ?s a skos:Concept ;
          skos:inScheme <https://w3id.org/italia/controlled-vocabulary/territorial-classifications/provinces> ;
          skos:notation ?ID ;
          clv:acronym ?provincia .

     } """
.

##Logical Source CITY RDF
<#LogicalSourceCITYRDF> a rml:BaseSource ;
      rml:source <#InputSPARQL>;
      rml:referenceFormulation ql:JSONPath;
      rml:iterator "$.results.bindings[*]";
      rml:query """
      PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX clv: <https://w3id.org/italia/onto/CLV/>
PREFIX ti: <https://w3id.org/italia/onto/TI/>
SELECT ?s ?ID ?nome ?starttime ?endTime
WHERE { ?s a skos:Concept ;
        skos:inScheme <https://w3id.org/italia/controlled-vocabulary/territorial-classifications/cities> ;
        skos:notation ?ID ;
        skos:prefLabel ?nome ;
        clv:hasSOValidity/ti:endTime ?endTime ;
        clv:hasSOValidity/ti:startTime ?starttime ;
        clv:hasHigherRank <https://w3id.org/italia/controlled-vocabulary/territorial-classifications/regions/03> .
        FILTER (str(?endTime)="9999-12-31")

}
 """
      .


###########################################################
##                  MAPPING RULES
##########################################################

#### WATER OBSERVATION MAPPING
<#WaterPCPObservationMapping> a rr:TriplesMap;
rml:logicalSource <#LogicalSourceLakes>;
 rr:subjectMap [
   fnml:functionValue [
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant idlab-fn:trueCondition ]
     ];
     rr:predicateObjectMap [
       rr:predicate idlab-fn:strBoolean ;
       rr:objectMap <#IsNotDepthParameter>
     ];
     rr:predicateObjectMap [
       rr:predicate idlab-fn:str ;
       rr:objectMap <#PhysicoChemicalObservationMapping>
     ]
   ] ;
   rr:class w-mon:WaterPhysicoChemicalParameterObservation
] ;
rr:predicateObjectMap [
 rr:predicate rdfs:label ;
 rr:objectMap [ rr:template "Observation for the physico-chemical parameter {parametro} with value {valore_testuale} for lake {lago} - {descrizione_profondit} - of the water basin {bacino_idrografico} for year {anno}" ; rr:language "en" ]
];
rr:predicateObjectMap [
 rr:predicate rdfs:label ;
 rr:objectMap [ rr:template "Osservazione del parametro fisico-chimico {parametro} con valore {valore_testuale} per il lago {lago} - {descrizione_profondit} - del bacino idrografico {bacino_idrografico} fatta nell'anno {anno}" ; rr:language "it" ]
];
rr:predicateObjectMap [
 rr:predicate w-mon:hasObservationSample ;
 rr:objectMap <#URIObservationSampleMapping>
];
rr:predicateObjectMap [
  rr:predicate w-mon:hasResult ;
  rr:objectMap <#URLifyObservationResult>
];
rr:predicateObjectMap [
   rr:predicate w-mon:hasWaterObservableProperty ;
   rr:objectMap <#URIObservablePropertiesCASMapping>
] ;
rr:predicateObjectMap [
   rr:predicate w-mon:hasWaterObservableProperty ;
   rr:objectMap <#URIObservablePropertiesWISEMapping>
] ;
rr:predicateObjectMap [
   rr:predicate w-mon:hasWaterObservableProperty ;
   rr:objectMap <#URIObservablePropertiesOtherMapping>
] ;
rr:predicateObjectMap [
   rr:predicate w-mon:hasChemicalSubstance ;
   rr:objectMap [ rr:template "https://w3id.org/whow/controlled-vocabulary/chemical-substances/cas-{cas}" ; rr:termType rr:IRI ]
] ;
rr:predicateObjectMap [
  rr:predicate tiapit:hasTemporalCoverage ;
  rr:objectMap [ rr:template "https://w3id.org/italia/lombardia/data/year/{anno}"; rr:termType rr:IRI ]
];
rr:predicateObjectMap [
  rr:predicate ispra-emf:generationTime ;
  rr:objectMap [ rr:template "https://w3id.org/italia/lombardia/data/temporal-entity/({data_campionamento})"; rr:termType rr:IRI ]
];
rr:predicateObjectMap [
   rr:predicate ispra-emf:hasFeatureOfInterest ;
   rr:objectMap <#URIWaterBody>
].

<#PhysicoChemicalObservationMapping>
rr:termType rr:IRI ;
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  [ rr:constant "https://w3id.org/italia/lombardia/data/water-observation"]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  <#MD5Execution>
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_string_sep ;
   rr:objectMap [ rr:constant "/" ]
 ];
].

<#IsNotDepthParameter>
fnml:functionValue [
    rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant idlab-fn:notEqual ];
    ] ;
    rr:predicateObjectMap [
        rr:predicate grel:valueParameter ;
        rr:objectMap [ rr:constant "CAM-PRF-0" ]
    ] ;
    rr:predicateObjectMap [
        rr:predicate grel:valueParameter2 ;
        rr:objectMap [ rml:reference "other" ]
    ]
] .


#######################################
# TEMPORAL ENTITY OBJECT DATE MAPPING
#######################################
<#TemporalEntityDateMapping> a rr:TriplesMap ;
rml:logicalSource <#LogicalSourceLakes>;
rr:subjectMap [
  rr:template "https://w3id.org/italia/lombardia/data/temporal-entity/({data_campionamento})";
  rr:class ispra-top:TemporalEntity
] ;
rr:predicateObjectMap [
   rr:predicate rdfs:label ;
   rr:objectMap [ rr:template "Temporal Entity: {data_campionamento}" ; rr:language "en" ]
 ];
 rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [ rr:template "Entit√† temporale: {data_campionamento}" ; rr:language "it" ]
 ];
 rr:predicateObjectMap [
    rr:predicate ispra-top:time ;
    rr:objectMap [ rml:reference "data_campionamento" ; rr:datatype xsd:date ]
 ].

# ##########################################
# ## TEMPORAL ENTITY OBJECT YEAR MAPPING
# ##########################################
<#TemporalEntityYearMapping> a rr:TriplesMap ;
rml:logicalSource <#LogicalSourceLakes>;
rr:subjectMap [
  rr:template "https://w3id.org/italia/lombardia/data/year/{anno}";
  rr:class tiapit:Year
];
rr:predicateObjectMap [
   rr:predicate rdfs:label ;
   rr:objectMap [ rr:template "Year: {anno}" ; rr:language "en" ]
 ];
 rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [ rr:template "Anno: {anno}" ; rr:language "it" ]
 ];
 rr:predicateObjectMap [
    rr:predicate tiapit:year ;
    rr:objectMap [ rml:reference "anno" ; rr:datatype xsd:gYear ]
 ].

###########
# WISE COLUMN MGMT
############
<#URIObservablePropertiesWISEMapping>
rr:termType rr:IRI ;
 fnml:functionValue [
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant grel:controls_if ]
    ];
    rr:predicateObjectMap [
      rr:predicate grel:bool_b ;
      rr:objectMap <#IsWISENull>
    ];
    rr:predicateObjectMap [
      rr:predicate grel:any_false ;
      rr:objectMap <#WISEMapping>
    ]
  ] .

<#WISEMapping>
rr:termType rr:IRI ;
fnml:functionValue [
rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  [ rr:constant "https://w3id.org/italia/lombardia/data/observable-properties"]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap <#RemoveWISE>
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_string_sep ;
   rr:objectMap [ rr:constant "/" ]
 ];
].

<#IsWISENull>
fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant idlab-fn:isNull ]
  ];
  rr:predicateObjectMap [
    rr:predicate idlab-fn:str ;
    rr:objectMap [ rml:reference "wise" ]
  ]
] .

<#RemoveWISE>
fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:string_replace ]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:valueParameter ;
    rr:objectMap [ rml:reference "wise" ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_find ;
    rr:objectMap [ rr:constant "WISE " ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_replace ;
    rr:objectMap [ rr:constant "wise-" ]
  ]
] .

#################
# CAS COLUMN MGMT
#################
<#URIObservablePropertiesCASMapping>
rr:termType rr:IRI ;
 fnml:functionValue [
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant grel:controls_if ]
    ];
    rr:predicateObjectMap [
      rr:predicate grel:bool_b ;
      rr:objectMap <#IsCasNull>
    ];
    rr:predicateObjectMap [
      rr:predicate grel:any_false ;
      rr:objectMap [ rr:template "https://w3id.org/italia/lombardia/data/observable-properties/{cas}" ]
    ]
  ] .

<#IsCasNull>
fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant idlab-fn:isNull ]
  ];
  rr:predicateObjectMap [
    rr:predicate idlab-fn:str ;
    rr:objectMap [ rml:reference "cas" ]
  ]
] .

##################
## OTHER COLUMN MGMT
#################
<#URIObservablePropertiesOtherMapping>
rr:termType rr:IRI ;
 fnml:functionValue [
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant grel:controls_if ]
    ];
    rr:predicateObjectMap [
      rr:predicate grel:bool_b ;
      rr:objectMap <#IsOtherNull>
    ];
    rr:predicateObjectMap [
      rr:predicate grel:any_false ;
      rr:objectMap <#OtherMapping>
    ]
  ] .

<#IsOtherNull>
fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant idlab-fn:isNull ]
  ];
  rr:predicateObjectMap [
    rr:predicate idlab-fn:str ;
    rr:objectMap [ rml:reference "other" ]
  ]
] .

<#OtherMapping>
rr:termType rr:IRI ;
fnml:functionValue [
rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  [ rr:constant "https://w3id.org/italia/lombardia/data/observable-properties"]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap <#RemoveCASID>
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_string_sep ;
   rr:objectMap [ rr:constant "/" ]
 ];
].


<#RemoveCASID>
fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:string_replace ]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:valueParameter ;
    rr:objectMap [ rml:reference "other" ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_find ;
    rr:objectMap [ rr:constant "CASID" ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_replace ;
    rr:objectMap [ rr:constant "" ]
  ]
] .

# #################
# ### WATER SAMPLE OBJECT MAPPING
# #################
<#ObservationSampleMapping> a rr:TriplesMap;
rml:logicalSource <#LogicalSourceLakes>;
  rr:subjectMap [
    fnml:functionValue [
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant idlab-fn:trueCondition ]
      ];
      rr:predicateObjectMap [
        rr:predicate idlab-fn:strBoolean ;
        rr:objectMap <#IsNotDepthParameter>
      ];
      rr:predicateObjectMap [
        rr:predicate idlab-fn:str ;
        rr:objectMap <#PhysicoChemicalObsSampleMapping>
      ]
    ] ;
    rr:class w-mon:WaterSample , w-mon:WaterFeature
 ];
 rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [ rr:template "Water depth sampling description: {descrizione_profondit} - value: {profondit}" ; rr:language "en" ]
  ];
  rr:predicateObjectMap [
     rr:predicate rdfs:label ;
     rr:objectMap [ rr:template "Campione {descrizione_profondit} - valore: {profondit}" ; rr:language "it" ]
  ];
  rr:predicateObjectMap [
     rr:predicate w-mon:hasDepth ;
     rr:objectMap <#URIValueDepthMapping>
  ];
  rr:predicateObjectMap [
    rr:predicate w-mon:isObtainedBy ;
    rr:objectMap [ rr:template "https://w3id.org/italia/lombardia/data/water-sampler/{codice_stazione}"; rr:termType rr:IRI ]
  ];
  rr:predicateObjectMap [
    rr:predicate w-mon:isSampleOf ;
    rr:objectMap <#URIWaterBody>
  ] .

<#PhysicoChemicalObsSampleMapping>
rr:termType rr:IRI ;
  fnml:functionValue [
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant grel:array_join ]
     ];
     rr:predicateObjectMap [
       rr:predicate grel:p_array_a ;
       rr:objectMap [ rr:constant "https://w3id.org/italia/lombardia/data/water-sample" ]
     ] ;
     rr:predicateObjectMap [
       rr:predicate grel:p_array_a ;
       rr:objectMap <#MD5URI>
     ];
     rr:predicateObjectMap [
         rr:predicate grel:p_string_sep ;
         rr:objectMap [ rr:constant "/"]
     ]
  ].

<#URIValueDepthMapping>
rr:termType rr:IRI;
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  [ rr:constant "https://w3id.org/italia/lombardia/data/value"]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  <#MD5DepthUnitMeasure>
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_string_sep ;
   rr:objectMap [ rr:constant "/" ]
 ];
].

<#MD5DepthUnitMeasure>
fnml:functionValue [
  rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:string_md5 ]
  ];
  rr:predicateObjectMap [
   rr:predicate grel:valueParameter ;
   rr:objectMap <#ArrayJoinDepthUM>
  ];
].

<#ArrayJoinDepthUM>
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  [ rml:reference "profondit"]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  [ rr:constant "meter"]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_string_sep ;
   rr:objectMap [ rr:constant "" ]
 ];
].


<#URIWaterBody>
rr:termType rr:IRI ;
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  [ rr:constant "https://w3id.org/italia/lombardia/data/lake-water-body"]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  <#SlugifyNOMECORPOIDRICO>
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_string_sep ;
   rr:objectMap [ rr:constant "/" ]
 ];
].

##########################
# DEPTH VALUE MAPPING
##########################
<#DepthValueMapping> a rr:TriplesMap;
rml:logicalSource <#LogicalSourceLakes>;
rr:subjectMap [
  fnml:functionValue [
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant idlab-fn:trueCondition ]
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:strBoolean ;
      rr:objectMap <#IsNotDepthParameter>
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:str ;
      rr:objectMap <#PhysicoChemicalDepthValueMapping>
    ]
  ] ;
  rr:class ispra-top:Value
] ;
rr:predicateObjectMap [
   rr:predicate rdfs:label ;
   rr:objectMap [ rr:template "Value {profondit} expressed in meter" ; rr:language "en" ]
 ];
 rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [ rr:template "Valore {profondit} espresso in metri" ; rr:language "it" ]
 ];
 rr:predicateObjectMap [
    rr:predicate ispra-top:value ;
    rr:objectMap [ rml:reference "profondit" ]
 ];
 rr:predicateObjectMap [
    rr:predicate ispra-top:hasUnitOfMeasure ;
    rr:objectMap [ rr:constant "https://w3id.org/italia/lombardia/data/unit-of-measure/m" ; rr:termType rr:IRI ]
 ].

<#PhysicoChemicalDepthValueMapping>
rr:termType rr:IRI ;
 fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:array_join ]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:constant "https://w3id.org/italia/lombardia/data/value"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  <#MD5DepthUnitMeasure>
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_sep ;
    rr:objectMap [ rr:constant "/" ]
  ]
 ].


# #########################
# # UNIT OF MEASURE FOR DEPTH
# #########################
# <#UnitOfMeasureForDepth> a rr:TriplesMap;
# rml:logicalSource <#LogicalSourceLakes>;
# rr:subjectMap [
#   rr:constant "https://w3id.org/italia/lombardia/data/unit-of-measure/metro";
#   rr:class ispra-top:UnitOfMeasure
# ] ;
# rr:predicateObjectMap [
#    rr:predicate rdfs:label ;
#    rr:objectMap [ rr:constant "Unit of measure m" ; rr:language "en" ]
# ];
# rr:predicateObjectMap [
#    rr:predicate rdfs:label ;
#    rr:objectMap [ rr:constant "Unit√† di misura metro" ; rr:language "it" ]
# ];
# rr:predicateObjectMap [
#    rr:predicate ispra-top:name ;
#    rr:objectMap [ rr:constant "metro" ; rr:language "it" ]
# ].



# ##############
# ### OBSERVATION VALUE OBJECT MAPPING IF RANGE
# ##############
<#ObservationValueRangeMapping> a rr:TriplesMap;
rml:logicalSource <#LogicalSourceLakes>;
  rr:subjectMap [
    fnml:functionValue [
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant idlab-fn:trueCondition ]
      ];
      rr:predicateObjectMap [
        rr:predicate idlab-fn:strBoolean ;
        rr:objectMap <#IsNotDepthParameter>
      ];
      rr:predicateObjectMap [
        rr:predicate idlab-fn:str ;
        rr:objectMap <#PhysicoChemicalObsValueRangeMapping>
      ]
    ] ;
    rr:class w-mon:ObservationValue
  ];
  rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [ rr:template "Observation value {valore_testuale} {unita_di_misura}" ; rr:language "en" ]
  ];
  rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [ rr:template "Valore dell'osservazione {valore_testuale} {unita_di_misura_testuale}" ; rr:language "it" ]
  ];
  rr:predicateObjectMap [
    rr:predicate w-mon:lowerBound;
    rr:objectMap [ rr:constant "0" ; rr:datatype xsd:float ]
  ];
  rr:predicateObjectMap [
    rr:predicate w-mon:upperBound;
    rr:objectMap [ rml:reference "valore_numerico" ; rr:datatype xsd:float ]
  ];
  rr:predicateObjectMap [
    rr:predicate ispra-top:hasUnitOfMeasure;
    rr:objectMap <#URIforUnitOfMeasure>
  ].

<#PhysicoChemicalObsValueRangeMapping>
rr:termType rr:IRI ;
  fnml:functionValue [
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant idlab-fn:trueCondition ]
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:strBoolean ;
      rr:objectMap <#MinorSegnoMapping>
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:str ;
      rr:objectMap <#URIObservableValueObject>
    ]
  ] .

<#URIObservableValueObject>
rr:termType rr:IRI ;
  fnml:functionValue [
   rr:predicateObjectMap [
     rr:predicate fno:executes ;
     rr:objectMap [ rr:constant grel:array_join ]
   ];
   rr:predicateObjectMap [
      rr:predicate grel:p_array_a ;
      rr:objectMap [ rr:constant "https://w3id.org/italia/lombardia/data/observation-value"]
   ] ;
   rr:predicateObjectMap [
      rr:predicate grel:p_array_a ;
      rr:objectMap <#MD5ValueUM>
   ] ;
   rr:predicateObjectMap [
      rr:predicate grel:p_string_sep ;
      rr:objectMap [ rr:constant "/" ]
   ]
  ] .

<#URIforUnitOfMeasure>
rr:termType rr:IRI ;
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap  [ rr:constant "https://w3id.org/italia/lombardia/data/measurement-unit"]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap <#SlugifyUM>
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_string_sep ;
   rr:objectMap [ rr:constant "/" ]
 ];
].

<#MinorSegnoMapping>
fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:string_contains ]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:valueParameter ;
    rr:objectMap [ rml:reference "segno"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:string_sub ;
    rr:objectMap [ rr:constant "<" ]
  ]
] .

<#SlugifyUM>
fnml:functionValue [
	rr:predicateObjectMap [
		rr:predicate fno:executes ;
		rr:objectMap [ rr:constant idlab-fn:slugify ]
	];
  rr:predicateObjectMap [
    rr:predicate idlab-fn:str ;
    rr:objectMap [ rml:reference "unita_di_misura"]
  ] ;
 ] .


# ##############
# ### OBSERVATION VALUE OBJECT MAPPING IF NOT RANGE
# ##############
<#ObservationValueNotRangeMapping> a rr:TriplesMap;
rml:logicalSource <#LogicalSourceLakes>;
 rr:subjectMap [
   fnml:functionValue [
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant idlab-fn:trueCondition ]
     ];
     rr:predicateObjectMap [
       rr:predicate idlab-fn:strBoolean ;
       rr:objectMap <#IsNotDepthParameter>
     ];
     rr:predicateObjectMap [
       rr:predicate idlab-fn:str ;
       rr:objectMap <#PhysicoChemicalObsValueNotRangeMapping>
     ]
   ] ;
   rr:class w-mon:ObservationValue
 ];
 rr:predicateObjectMap [
   rr:predicate rdfs:label ;
   rr:objectMap [ rr:template "Observation value {valore_testuale} {unita_di_misura}" ; rr:language "en" ]
 ];
 rr:predicateObjectMap [
   rr:predicate rdfs:label ;
   rr:objectMap [ rr:template "Valore dell'osservazione {valore_testuale} {unita_di_misura_testuale}" ; rr:language "it" ]
 ];
 rr:predicateObjectMap [
   rr:predicate ispra-top:value;
   rr:objectMap [ rml:reference "valore_numerico" ; rr:datatype xsd:float ]
 ];
 rr:predicateObjectMap [
   rr:predicate ispra-top:hasUnitOfMeasure;
   rr:objectMap <#URIforUnitOfMeasure>
 ].

<#PhysicoChemicalObsValueNotRangeMapping>
rr:termType rr:IRI ;
 fnml:functionValue [
   rr:predicateObjectMap [
     rr:predicate fno:executes ;
     rr:objectMap [ rr:constant idlab-fn:trueCondition ]
   ];
   rr:predicateObjectMap [
     rr:predicate idlab-fn:strBoolean ;
     rr:objectMap <#NotMinorSegnoMapping>
   ];
   rr:predicateObjectMap [
     rr:predicate idlab-fn:str ;
     rr:objectMap <#URIObservableValueObject>
   ]
 ] .

 <#NotMinorSegnoMapping>
 fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant idlab-fn:isNull ]
  ];
  rr:predicateObjectMap [
    rr:predicate idlab-fn:str ;
    rr:objectMap [ rml:reference "segno" ]
  ]
] .

# ##########################
# # UNIF OF MEASURE OBJECT MAPPING
# ##########################

<#UnitOfMeasureMapping> a rr:TriplesMap;
rml:logicalSource <#LogicalSourceLakes>;
 rr:subjectMap [
   fnml:functionValue [
     rr:predicateObjectMap [
       rr:predicate fno:executes ;
       rr:objectMap [ rr:constant idlab-fn:trueCondition ]
     ];
     rr:predicateObjectMap [
       rr:predicate idlab-fn:strBoolean ;
       rr:objectMap <#IsNotDepthParameter>
     ];
     rr:predicateObjectMap [
       rr:predicate idlab-fn:str ;
       rr:objectMap <#PhysicoChemicalUMMapping>
     ]
   ] ;
   rr:class ispra-top:UnitOfMeasure
 ];
 rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [ rr:template "Unit of measure {unita_di_misura}" ; rr:language "en"]
 ];
 rr:predicateObjectMap [
    rr:predicate rdfs:label ;
    rr:objectMap [ rr:template "Unit√† di misura {unita_di_misura_testuale}" ; rr:language "it"]
 ];
 rr:predicateObjectMap [
    rr:predicate l0:name ;
    rr:objectMap [ rml:reference "unita_di_misura_testuale" ; rr:language "it" ]
 ];
 rr:predicateObjectMap [
    rr:predicate ispra-top:name ;
    rr:objectMap [ rml:reference "unita_di_misura_testuale" ; rr:language "it" ]
 ].

<#PhysicoChemicalUMMapping>
rr:termType rr:IRI ;
 fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:array_join ]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:constant "https://w3id.org/italia/lombardia/data/measurement-unit"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap <#SlugifyUM>
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_sep ;
    rr:objectMap [ rr:constant "/" ]
  ]
 ].

# ###################
# ### WATER SAMPLER MAPPING
# ###################
<#WaterSamplerMapping> a rr:TriplesMap;
rml:logicalSource <#LogicalSourceLakes>;
rr:subjectMap [
  fnml:functionValue [
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant idlab-fn:trueCondition ]
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:strBoolean ;
      rr:objectMap <#IsNotDepthParameter>
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:str ;
      rr:objectMap [ rr:template "https://w3id.org/italia/lombardia/data/water-sampler/{codice_stazione}"; rr:termType rr:IRI ]
    ]
  ] ;
  rr:class w-mon:WaterSampler
 ];
 rr:predicateObjectMap [
  rr:predicate rdfs:label ;
  rr:objectMap [ rr:template "Water Sampler: Station {codice_stazione}" ; rr:language "en"]
];
 rr:predicateObjectMap [
  rr:predicate rdfs:label ;
  rr:objectMap [ rr:template "Stazione prelievo {codice_stazione}" ; rr:language "it"]
];
rr:predicateObjectMap [
 rr:predicate ispra-plc:hasGeometry ;
 rr:objectMap [ rr:template "https://w3id.org/italia/lombardia/data/geometry/{coord_y}-{coord_x}" ; rr:termType rr:IRI ]
];
rr:predicateObjectMap [
  rr:predicate ispra-plc:hasProvince ;
  rr:objectMap [
     rr:parentTriplesMap <#ProvinceMapping> ;
     rr:joinCondition [
        rr:child "provincia";
        rr:parent "provincia.value" ;
     ] ;
   ] ;
 ];
 rr:predicateObjectMap [
    rr:predicate ispra-plc:hasMunicipality ;
    rr:objectMap [
       rr:parentTriplesMap <#CityMapping> ;
       rr:joinCondition [
          rr:child "comune";
          rr:parent "nome.value" ;
       ] ;
    ]
] .

# ##############################
# ## CITY LINKING
# ##############################

<#CityMapping> a rr:TriplesMap ;
rml:logicalSource <#LogicalSourceCITYRDF> ;
rr:subjectMap [
  rr:template "https://w3id.org/italia/controlled-vocabulary/territorial-classifications/cities/{ID.value}-({starttime.value})" ;  rr:termType rr:IRI ;
].

# ##############################
# ## PROVINCE LINKING
# ##############################

<#ProvinceMapping> a rr:TriplesMap ;
rml:logicalSource <#LogicalSourcePROVINCERDF> ;
rr:subjectMap [
  rr:template "https://w3id.org/italia/controlled-vocabulary/territorial-classifications/provinces/{ID.value}" ;  rr:termType rr:IRI ;
].

# ####################
# ## GEOMETRY MAPPING OBJECT MAPPING
# #####################
<#GeometryMapping> a rr:TriplesMap ;
rml:logicalSource <#LogicalSourceLakes> ;
rr:subjectMap [
  fnml:functionValue [
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant idlab-fn:trueCondition ]
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:strBoolean ;
      rr:objectMap <#IsNotDepthParameter>
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:str ;
      rr:objectMap [ rr:template "https://w3id.org/italia/lombardia/data/geometry/{coord_y}-{coord_x}"; rr:termType rr:IRI ]
    ]
  ] ;
  rr:class ispra-plc:Geometry
] ;
rr:predicateObjectMap [
  rr:predicate rdfs:label;
  rr:objectMap [ rr:template "Geometria {coord_y}-{coord_x}" ; rr:language "it" ]
] ;
rr:predicateObjectMap [
  rr:predicate rdfs:label;
  rr:objectMap [ rr:template "Geometry {coord_y}-{coord_x}" ; rr:language "en" ]
] ;
rr:predicateObjectMap [
  rr:predicate ispra-top:isClassifiedBy;
  rr:objectMap [ rr:constant "https://w3id.org/italia/lombardia/data/geometry-type/point"; rr:termType rr:IRI ]
] ;
rr:predicateObjectMap [
  rr:predicate ispra-plc:lat;
  rr:objectMap [ rml:reference "coord_y" ]
] ;
rr:predicateObjectMap [
  rr:predicate ispra-plc:long;
  rr:objectMap [ rml:reference "coord_x" ]
] .


# ###################
# ## GEOMETRY TYPE MAPPING OBJECT MAPPING
# #####################
<#GeometryTypeMapping> a rr:TriplesMap ;
rml:logicalSource <#LogicalSourceLakes> ;
rr:subjectMap [
  fnml:functionValue [
    rr:predicateObjectMap [
      rr:predicate fno:executes ;
      rr:objectMap [ rr:constant idlab-fn:trueCondition ]
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:strBoolean ;
      rr:objectMap <#IsNotDepthParameter>
    ];
    rr:predicateObjectMap [
      rr:predicate idlab-fn:str ;
      rr:objectMap [ rr:constant "https://w3id.org/italia/lombardia/data/geometry-type/point"; rr:termType rr:IRI ]
    ]
  ] ;
  rr:class ispra-plc:GeometryType
] ;
rr:predicateObjectMap [
  rr:predicate rdfs:label;
  rr:objectMap [ rr:constant "Geometry Type: Point" ; rr:language "en" ]
] ;
rr:predicateObjectMap [
  rr:predicate rdfs:label;
  rr:objectMap [ rr:constant "Tipo di Geometria: Punto" ; rr:language "it" ]
] ;
rr:predicateObjectMap [
  rr:predicate ispra-top:name;
  rr:objectMap [ rr:constant "Punto" ; rr:language "it" ]
] ;
rr:predicateObjectMap [
  rr:predicate ispra-top:name;
  rr:objectMap [ rr:constant "Point" ; rr:language "en" ]
] .


# # ## 5. Mapping observation sample URIObservationSampleMapping
<#URIObservationSampleMapping>
rr:termType rr:IRI ;
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap [ rr:constant "https://w3id.org/italia/lombardia/data/water-sample" ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap <#MD5URI>
 ];
 rr:predicateObjectMap [
     rr:predicate grel:p_string_sep ;
     rr:objectMap [ rr:constant "/"]
 ]
].

<#MD5URI>
fnml:functionValue [
  rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:string_md5 ]
  ];
  rr:predicateObjectMap [
   rr:predicate grel:valueParameter ;
   rr:objectMap <#ArrayJoinDescAndDepth>
  ];
].

<#ArrayJoinDescAndDepth>
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ];
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap [ rml:reference "profondit" ]
 ] ;
 rr:predicateObjectMap [
   rr:predicate grel:p_array_a ;
   rr:objectMap [ rml:reference "descrizione_profondit"]
 ];
 rr:predicateObjectMap [
     rr:predicate grel:p_string_sep ;
     rr:objectMap [ rr:constant ""]
 ]
].

# ##### URI of Observation Value Mapping
<#URLifyObservationResult>
rr:termType rr:IRI ;
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ];

  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap [ rr:constant "https://w3id.org/italia/lombardia/data/observation-value"]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap <#MD5ValueUM>
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_string_sep ;
    rr:objectMap [ rr:constant "/" ]
  ]
] .

<#MD5ValueUM>
fnml:functionValue [
  rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:string_md5 ]
  ];
  rr:predicateObjectMap [
   rr:predicate grel:valueParameter ;
   rr:objectMap <#UnionValueUM>
  ];
].

<#UnionValueUM>
fnml:functionValue [
 rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:array_join ]
 ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap [ rml:reference "valore_testuale"]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap [ rml:reference "unita_di_misura_testuale"]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_string_sep ;
    rr:objectMap [ rr:constant "" ]
  ]
] .


## MD5 MD5Execution
<#MD5Execution>
fnml:functionValue [
  rr:predicateObjectMap [
   rr:predicate fno:executes ;
   rr:objectMap [ rr:constant grel:string_md5 ]
  ];
  rr:predicateObjectMap [
   rr:predicate grel:valueParameter ;
   rr:objectMap <#ArrayJoinEntry>
  ];
].


### Array join intera riga
<#ArrayJoinEntry>
fnml:functionValue [
  rr:predicateObjectMap [
    rr:predicate fno:executes ;
    rr:objectMap [ rr:constant grel:array_join ]
  ] ;
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{bacino_idrografico}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{lago}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{corpo_idrico}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{provincia}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{comune}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{coord_x}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{coord_y}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{codice_stazione}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{data_campionamento}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{parametro}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{valore_numerico}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{valore_testuale}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{cas}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{wise}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{other}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{profondit}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{descrizione_profondit}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{unita_di_misura_testuale}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{unita_di_misura}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{formula_parametro}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_array_a ;
    rr:objectMap  [ rr:template "{anno}"]
  ];
  rr:predicateObjectMap [
    rr:predicate grel:p_string_sep ;
    rr:objectMap [ rr:constant "/" ]
  ];
].

<#SlugifyNOMECORPOIDRICO>
fnml:functionValue [
	rr:predicateObjectMap [
		rr:predicate fno:executes ;
		rr:objectMap [ rr:constant idlab-fn:slugify ]
	];
  rr:predicateObjectMap [
    rr:predicate idlab-fn:str ;
    rr:objectMap [ rml:reference "lago"]
  ] ;
 ] .
